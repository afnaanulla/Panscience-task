version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: task-management-db-dev
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: task_management_dev
    volumes:
      - mongodb_dev_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - task-management-dev-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Development with hot reload)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: task-management-backend-dev
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/task_management_dev?authSource=admin
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - JWT_EXPIRE=7d
      - CLIENT_URL=http://localhost:3000
      - STORAGE_TYPE=local
      - UPLOADS_PATH=./uploads
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_dev_uploads:/app/uploads
    ports:
      - "5000:5000"
      - "9229:9229" # Node.js debugging port
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - task-management-dev-network
    restart: unless-stopped
    command: npm run dev

  # Frontend React App (Development with hot reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: task-management-frontend-dev
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend-dev
    networks:
      - task-management-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true
    command: npm start

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: task-management-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - task-management-dev-network
    command: redis-server --appendonly yes

  # MongoDB Express (Database GUI)
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: task-management-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - task-management-dev-network
    restart: unless-stopped

volumes:
  mongodb_dev_data:
    driver: local
  backend_dev_uploads:
    driver: local
  redis_dev_data:
    driver: local

networks:
  task-management-dev-network:
    driver: bridge
